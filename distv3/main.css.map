{"version":3,"sources":["webpack:///src/pages/Home.vue","webpack:///src/components/comp1.vue","webpack:///src/pages/Contact.vue"],"names":[],"mappings":";AA2EA;EACE,WAAY;EACZ,gBAAa;EACb,aAAa;EACb,mBAAmB;EACnB,8BAA8B;AAChC;;;ACxBA;EACE,wBAAwB;EACxB,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,mBAAgB;AAClB;AACA;EACE,WAAY;EACZ,gBAAa;EACb,iBAAc;EACd,cAAe;AACjB;;;ACvBA;EACE,kBAAe;AACjB","file":"main.css","sourcesContent":["<template>\r\n  <div>\r\n    <div>I am in Home page</div>\r\n    <div class=\"flexBox\">\r\n      <span>ref:{{ count }}</span>\r\n      <span>store:{{ count }}</span>\r\n      <span>double:{{ double }}</span>\r\n      <button @click=\"addRef\">addRef</button>\r\n    </div>\r\n    <ul>\r\n      <li v-for=\"item in numbers\" :key=\"item\">{{ item }}</li>\r\n    </ul>\r\n    <h5>{{ person.name }}</h5>\r\n    <div class=\"flexBox\">\r\n      <button @click=\"updateGreeting\">updateTitle</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n//ref 由传入值返回一个响应式的、可变的且只有value一个属性的ref对象 （简单数据，原始类型）\r\n//  string 和 number 是只有值，没有引用的  故vue无论defineProperty proxy均无法实时监听  所以必须包装对象ref(3) data(2)\r\n// reactive   reactive的作用是将对象包装成响应式对象副本——通过 Proxy代理后的对象。set forceUpdate滚出\r\nimport { ref, reactive, toRefs, computed, watch } from \"vue\";\r\nimport { useStore } from 'vuex';\r\nexport default {\r\n  //准备，在节点渲染之前执行\r\n  setup() {\r\n    // store事件\r\n    \r\n    //生命变量方法一：\r\n    // const count = ref(0);\r\n    // const double = computed(() => {\r\n    //   return count.value * 2;\r\n    // });\r\n    // const addRef = () => {\r\n    //   count.value++;\r\n    // };\r\n    //生命变量方法二：\r\n    const store = useStore();\r\n    const data = reactive({\r\n      count: 0,\r\n      addRef: () => {\r\n        data.count++;\r\n        store.dispatch('add');\r\n      },\r\n      double: computed(() => data.count * 2),\r\n      numbers: [1, 2, 3],\r\n      person: {},\r\n    });\r\n    //对象添加新属性或者数组改变长度\r\n    data.numbers[3] = 5;\r\n    data.person.name = \"hahh\";\r\n    // watch属性使用方法\r\n    const greetings = ref(\"\");\r\n    const updateGreeting = () => {\r\n      greetings.value = \"title\";\r\n    };\r\n    watch([greetings, data], (newValue, oldValue) => {\r\n      console.log({ new: newValue, old: oldValue });\r\n      document.title = \"update-\" + greetings.value + \"-\" + data.count;\r\n    });\r\n    return {\r\n      // count,\r\n      // double,\r\n      // addRef,\r\n      ...toRefs(data),\r\n      greetings,\r\n      updateGreeting,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.flexBox {\r\n  width: 600px;\r\n  height: 100px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n</style>\r\n","<template>\r\n  <teleport to=\"#model\">\r\n    <div class=\"ccinps\">\r\n      <div>\r\n        {{ data1_c.a }}<button @click=\"changeIt()\">let change obj !</button>\r\n      </div>\r\n      <br />\r\n      <input\r\n        class=\"ccinp\"\r\n        type=\"text\"\r\n        placeholder=\"i am in comp1\"\r\n        v-model=\"data2_c\"\r\n      />\r\n      <div @click=\"ftk\">let father talk</div>\r\n    </div>\r\n  </teleport>\r\n</template>\r\n\r\n<script>\r\nimport { ref, reactive, toRefs, inject } from \"vue\";\r\nexport default {\r\n  setup(props, context) {\r\n    console.log(\"i am prop\", props);\r\n    const data1_c = props.data1_c;\r\n    const data2_c = inject(\"data2_c\");\r\n    const changeIt = () => {\r\n      data1_c.a == \"ss\" ? (data1_c.a = \"xx\") : (data1_c.a = \"ss\");\r\n    };\r\n    const ftk = () => {\r\n      console.log(\"contxt-c\", context);\r\n      context.emit(\"FatherTalk\");\r\n    };\r\n    const alr = () => {\r\n      alert(\"i am child\");\r\n    };\r\n    return {\r\n      data1_c,\r\n      data2_c,\r\n      alr,\r\n      ftk,\r\n      changeIt,\r\n    };\r\n  },\r\n  props: {\r\n    data1_c: {\r\n      type: Object,\r\n      default: () => {\r\n        return {\r\n          a: \"\",\r\n        };\r\n      },\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.ccinps {\r\n  border-top:1px solid red;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin-top: 50px;\r\n}\r\n.ccinp {\r\n  width: 600px;\r\n  height: 100px;\r\n  margin: 10px 0;\r\n  font-size: 30px;\r\n}\r\n</style>\r\n","<template>\r\n  <div class=\"cct\">\r\n    <div>i am data1 in father: {{ data1 }}</div>\r\n    <div>i am data2 in father: {{ data2 }}</div>\r\n    <Comp1 ref=\"RefChilde\" :data1_c=\"data1\" @FatherTalk=\"FatherTalk\"></Comp1>\r\n    <br />\r\n    <br />\r\n    <div @click=\"trigerChild\">let child talk</div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { provide, inject, ref, reactive, toRefs } from \"vue\";\r\n\r\nimport Comp1 from \"@/components/comp1.vue\";\r\nexport default {\r\n  setup(props, context) {\r\n   \r\n    const state = reactive({\r\n      data1: { a: \"xx\" },\r\n    });\r\n    const data2= ref('456')\r\n    provide(\"data2_c\", data2);\r\n    const FatherTalk = () => {\r\n      alert(\"i am father\");\r\n    };\r\n    const RefChilde = ref(null);\r\n    const trigerChild = () => {\r\n      RefChilde.value.alr(); //类似vue2中的this.$refs.RefChilde\r\n    };\r\n   \r\n    return {\r\n      ...toRefs(state),\r\n      data2,\r\n      FatherTalk,\r\n      trigerChild,\r\n      RefChilde,\r\n    };\r\n  },\r\n  components: {\r\n    Comp1,\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.cct {\r\n  font-size: 28px;\r\n}\r\n</style>\r\n"],"sourceRoot":""}